/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2022-01-17 18:11:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Chat</title>\n");
      out.write("    <script>\n");
      out.write("   let chatUnit = {\n");
      out.write("               init() {\n");
      out.write("                   this.startbox = document.querySelector(\".start\");\n");
      out.write("                   this.chatbox = document.querySelector(\".chatbox\");\n");
      out.write("                   this.sendbox = document.querySelector(\".chatbox\");\n");
      out.write("\n");
      out.write("                   this.nameInput = this.startbox.querySelector(\"input\")\n");
      out.write("                   this.startBtn = this.startbox.querySelector(\"button\");\n");
      out.write("\n");
      out.write("                   this.msgTextArea = this.sendbox.querySelector(\"textarea\");\n");
      out.write("                   this.sendBtn = this.sendbox.querySelector(\"button\");\n");
      out.write("\n");
      out.write("                   this.messagesContainer = this.chatbox.querySelector(\".messages\");\n");
      out.write("                   this.bindEvents();\n");
      out.write("               },\n");
      out.write("\n");
      out.write("               bindEvents() {\n");
      out.write("                   this.startBtn.addEventListener(\"click\", e => this.openSocket());\n");
      out.write("\n");
      out.write("                   //key up - это отпустить любую кнопку\n");
      out.write("                   this.sendBtn.addEventListener(\"click\", e => {\n");
      out.write("                       if (this.msgTextArea.value) {\n");
      out.write("                           e.preventDefault();\n");
      out.write("                           this.send();\n");
      out.write("                       }\n");
      out.write("                   });\n");
      out.write("               },\n");
      out.write("\n");
      out.write("               send() {\n");
      out.write("                   this.sendMessage({\n");
      out.write("                       name: this.name,\n");
      out.write("                       text: this.msgTextArea.value\n");
      out.write("                   });\n");
      out.write("               },\n");
      out.write("\n");
      out.write("               openSocket() {\n");
      out.write("                   //ws - WebSocket\n");
      out.write("                   this.name = this.nameInput.value;\n");
      out.write("\n");
      out.write("                   this.ws = new WebSocket(\"ws://localhost:8080/ChatRSK/chat/\" + this.name);\n");
      out.write("                   this.ws.onopen = () => this.onOpenSock();\n");
      out.write("                   this.ws.onmessage = (e) => this.onMessage(JSON.parse(e.data));\n");
      out.write("                   this.ws.onclose = () => this.onClose();\n");
      out.write("\n");
      out.write("                   this.startbox.style.display = \"none\";\n");
      out.write("                   this.chatbox.style.display = \"block\";\n");
      out.write("               },\n");
      out.write("\n");
      out.write("               onOpenSock() {\n");
      out.write("\n");
      out.write("               },\n");
      out.write("\n");
      out.write("               onMessage(msg) {\n");
      out.write("                   let msgBlock = document.createElement(\"div\");\n");
      out.write("                   msgBlock.className = \"msg\";\n");
      out.write("\n");
      out.write("                   let fromBlock = document.createElement(\"div\");\n");
      out.write("                   fromBlock.className = \"from\";\n");
      out.write("                   fromBlock.innerText = msg.name;\n");
      out.write("\n");
      out.write("                   let textBlock = document.createElement(\"div\");\n");
      out.write("                   textBlock.className = \"text\";\n");
      out.write("                   textBlock.innerText = msg.text;\n");
      out.write("\n");
      out.write("                   msgBlock.appendChild(fromBlock);\n");
      out.write("                   msgBlock.appendChild(textBlock);\n");
      out.write("\n");
      out.write("                   this.messagesContainer.prepend(msgBlock);\n");
      out.write("\n");
      out.write("               },\n");
      out.write("\n");
      out.write("               onClose() {\n");
      out.write("\n");
      out.write("               },\n");
      out.write("\n");
      out.write("               sendMessage(msg) {\n");
      out.write("                   this.onMessage({\n");
      out.write("                       name: \"Me\",\n");
      out.write("                       text: msg.text\n");
      out.write("                   })\n");
      out.write("                   this.msgTextArea.value = \"\";\n");
      out.write("                   this.ws.send(JSON.stringify(msg));\n");
      out.write("               }\n");
      out.write("           };\n");
      out.write("\n");
      out.write("           window.addEventListener(\"load\", ev => chatUnit.init());\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("    <style>\n");
      out.write("    body {\n");
      out.write("       text-align: center;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("            div {\n");
      out.write("                margin-left: auto;\n");
      out.write("                margin-right: auto;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .chatbox {\n");
      out.write("                display: none;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .messages {\n");
      out.write("                background-color: #369;\n");
      out.write("                width: 500px;\n");
      out.write("                padding: 20px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .messages .msg {\n");
      out.write("                background-color: #fff;\n");
      out.write("                border-radius: 10px;\n");
      out.write("                margin-bottom: 10px;\n");
      out.write("                overflow: hidden;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("\n");
      out.write("            .sendBlock button{\n");
      out.write("                     width: 50;\n");
      out.write("                     height: 50;\n");
      out.write("                     bottom: 4px;\n");
      out.write("                     left: -1;\n");
      out.write("                     position: relative;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("            .messages .msg .from {\n");
      out.write("                background-color: #396;\n");
      out.write("                line-height: 30px;\n");
      out.write("                text-align: center;\n");
      out.write("                color: white\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .messages .msg .text {\n");
      out.write("                padding: 10px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            textarea.msg {\n");
      out.write("                width: 487px;\n");
      out.write("                    padding: 10px;\n");
      out.write("                    position: relative;\n");
      out.write("                    resize: none;\n");
      out.write("                    top: 17;\n");
      out.write("                    border: none;\n");
      out.write("                    box-shadow: 2px 2px 5px 0 inset;\n");
      out.write("            }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h1 class=\"title\">Chat Box</h1>\n");
      out.write("\n");
      out.write("<div class=\"start\">\n");
      out.write("    <input type=\"text\" class=\"username\" placeholder=\"enter name...\">\n");
      out.write("    <button id=\"startBtn\">start</button>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div class=\"chatbox\">\n");
      out.write("  <div class=\"sendBlock\">\n");
      out.write("    <textarea class=\"msg\"> </textarea>\n");
      out.write("    <button id=\"sendBtn\">SEND</button>\n");
      out.write("  </div>\n");
      out.write("    <div class=\"messages\">\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
